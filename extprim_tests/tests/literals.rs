#[macro_use] extern crate extprim_literals;
extern crate extprim;

use extprim::u128::u128;
use extprim::i128::i128;

use std::{i64, u64};

const U0: u128 = u128!(0);
const U1: u128 = u128!(209821153008728146027079839901507889163);
const U2: u128 = u128!(0x974abc531b71e0164e6a5cb291feb9b4);
const U2U: u128 = u128!(0x974ABC531B71E0164E6A5CB291FEB9B4);
const U3: u128 = u128!(0o1504503716555404565627130725154340050405661);
const U4: u128 = u128!(0b110010111110111011100011110010011010110101101001011011100100100001000100101010010001101111101111011000111100010010111010010011);
const U5: u128 = u128!(123_456_789_123_456_789_123_456_789);
const U6: u128 = u128!(0x0123_4567_89ab_cdef_fdec_ba98_7654_3210);

const I0: i128 = i128!(0);
const I0P: i128 = i128!(+0);
const I0N: i128 = i128!(-0);
const I1: i128 = i128!(1);
const I1P: i128 = i128!(+ 1);
const I1N: i128 = i128!(- 1);
const IMIN: i128 = i128!(-170141183460469231731687303715884105728);
const IMAX: i128 = i128!(170141183460469231731687303715884105727);
const I2: i128 = i128!(0x48e7f56608dd8c4d926f769042424b3e);
const I3: i128 = i128!(-0x1c41ff3676b8022eeb2455bf0fc39bae);
const I4: i128 = i128!(0o1625313102262713663604433414224157560730117);
const I5: i128 = i128!(-0o1456641431070074642031455660272641534005603);
const I6: i128 = i128!(-0b1011000000000000011110010110110001001111101010100110011001001111001100010101110100010011100101111110100110011000001101100011000);
const I7: i128 = i128!(0b1000001011111110010001001110010001010101110001001111001010001000001011010001010110000001111100010100010011001000111101011000010);

#[test]
fn test_literals_u() {
    assert_eq!(u128::from_parts(0, 0), U0);
    assert_eq!(u128::from_parts(11374427496273824550, 13269521563554916363), U1);
    assert_eq!(u128::from_parts(10901732913132462102, 5650430604513032628), U2);
    assert_eq!(u128::from_parts(10901732913132462102, 5650430604513032628), U2U);
    assert_eq!(u128::from_parts(7535716751783851467, 10825148027977730993), U3);
    assert_eq!(u128::from_parts(3673733272373451666, 1236879095157042835), U4);
    assert_eq!(u128::from_parts(6692605, 17502027875430457109), U5);
    assert_eq!(u128::from_parts(0x0123_4567_89ab_cdef, 0xfdec_ba98_7654_3210), U6);
}

#[test]
fn test_literals_i() {
    assert_eq!(i128::from_parts(0, 0), I0);
    assert_eq!(i128::from_parts(0, 0), I0P);
    assert_eq!(i128::from_parts(0, 0), I0N);
    assert_eq!(i128::from_parts(0, 1), I1);
    assert_eq!(i128::from_parts(0, 1), I1P);
    assert_eq!(i128::from_parts(-1, !0), I1N);
    assert_eq!(i128::from_parts(i64::MIN, 0), IMIN);
    assert_eq!(i128::from_parts(i64::MAX, u64::MAX), IMAX);
    assert_eq!(i128::from_parts(5253437308935179341, 10551782813911370558), I2);
    assert_eq!(i128::from_parts(-2036189115933262383, 1502982096543310930), I3);
    assert_eq!(i128::from_parts(8263175210112889794, 5107514375380643919), I4);
    assert_eq!(i128::from_parts(-7339205793792238093, 3785825598875628669), I5);
    assert_eq!(i128::from_parts(-6341135028387656488, 7444861624918467816), I6);
    assert_eq!(i128::from_parts(4719528808248670532, 1624322789729401538), I7);
}

// vim: ft=rust
