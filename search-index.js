var searchIndex = {};
searchIndex["extprim_literals"] = {"doc":"Literal macros for `extprim`.","items":[[5,"register","extprim_literals","Register the `extprim_literals` macros to the `syntex` registry.",null,{"inputs":[{"name":"registry"}],"output":null}],[14,"u128!","","Creates an unsigned 128-bit integer at compile time. The content can be any integer literals\nsupported by Rust, e.g.",null,null],[14,"i128!","","Creates a signed 128-bit integer at compile time. The content can be any integer literals\nsupported by Rust, e.g.",null,null]],"paths":[]};
searchIndex["extprim"] = {"doc":"This crate provides some extra simple types.","items":[[11,"fmt","core::num","",0,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"eq","","",0,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[0,"traits","extprim","Traits for conversion between the extra primitive types.",null,null],[3,"Wrapping","extprim::traits","Wrapper for `u128` and `i128` to turn arithmetic operators to wrapping ones.",null,null],[12,"0","","",1,null],[5,"pow","","Raise `base` to the power of `exp`, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"u32"}],"output":{"name":"t"}}],[5,"parse_rust_int_lit","","Parses a Rust integer literal into an actual integral type.",null,{"inputs":[{"name":"str"},{"name":"bool"}],"output":{"name":"result"}}],[8,"ToExtraPrimitive","","Trait for converting itself into the extra primitive types.",null,null],[10,"to_u128","","Tries to convert itself into an unsigned 128-bit integer.",2,{"inputs":[{"name":"toextraprimitive"}],"output":{"name":"option"}}],[10,"to_i128","","Tries to convert itself into a signed 128-bit integer.",2,{"inputs":[{"name":"toextraprimitive"}],"output":{"name":"option"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",1,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[0,"u128","extprim","Unsigned 128-bit integer.",null,null],[3,"u128","extprim::u128","An unsigned 128-bit number.",null,null],[5,"div_rem","","Computes the divisor and remainder simultaneously. Returns `(a/b, a%b)`.",null,null],[17,"BITS","","Number of bits an unsigned 128-bit number occupies.",null,null],[17,"BYTES","","Number of bytes an unsigned 128-bit number occupies.",null,null],[17,"MIN","","The smallest unsigned 128-bit integer (0).",null,null],[17,"MAX","","The largest unsigned 128-bit integer (`340_282_366_920_938_463_463_374_607_431_768_211_455`).",null,null],[17,"ZERO","","The constant 0.",null,null],[17,"ONE","","The constant 1.",null,null],[11,"eq","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"u128"}}],[11,"new","","Constructs a new 128-bit integer from a 64-bit integer.",3,{"inputs":[{"name":"u64"}],"output":{"name":"u128"}}],[11,"from_parts","","Constructs a new 128-bit integer from the high-64-bit and low-64-bit parts.",3,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"low64","","Fetch the lower-64-bit of the number.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"high64","","Fetch the higher-64-bit of the number.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u64"}}],[11,"as_i128","","Convert this number to signed with wrapping.",3,{"inputs":[{"name":"u128"}],"output":{"name":"i128"}}],[11,"rand","","",3,{"inputs":[{"name":"r"}],"output":{"name":"u128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\nthe type.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of\nthe type.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_add","","Calculates `self + other`.",3,null],[11,"overflowing_sub","","Calculates `self - other`.",3,null],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds\ninstead of overflowing.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds\ninstead of overflowing.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"add","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"self"}}],[11,"add","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_sub","extprim::u128","Checked integer subtraction. Computes `self - other`, returning `None` if underflow\noccurred.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"sub","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"self"}}],[11,"sub","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"add_assign","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"sub_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"neg","extprim::traits","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_add","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"saturating_sub","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"ordering"}}],[11,"not","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"bitand","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","extprim::traits","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"self"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand_assign","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"bitor_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"bitxor_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; (shift % 128)`.",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"wrapping_shr","","Panic-free bitwsie shift-right; yields `self &gt;&gt; (shift % 128)`.",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"u128"}}],[11,"overflowing_shl","","Shifts `self` left by `other` bits.",3,null],[11,"overflowing_shr","","Shifts `self` right by `other` bits.",3,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; other`, returning `None` if the shift is larger than\nor equal to the number of bits in `self` (128).",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"option"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"u32"}],"output":{"name":"self"}}],[11,"checked_shr","extprim::u128","Checked shift right. Computes `self &gt;&gt; other`, returning `None` if the shift is larger than\nor equal to the number of bits in `self` (128).",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"option"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl_assign","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":null}],[11,"shl_assign","","",3,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u8"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u16"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i8"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i16"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"i64"}],"output":null}],[11,"shr_assign","","",3,{"inputs":[{"name":"u128"},{"name":"isize"}],"output":null}],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\nof the type.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_mul","","Calculates the multiplication of `self` and `other`.",3,null],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric\nbounds instead of overflowing.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_mul_64","","Wrapping (modular) multiplication with a 64-bit number. Computes `self * other`, wrapping\naround at the boundary of the type.",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"overflowing_mul_64","","Calculates the multiplication of `self` and `other` with a 64-bit number.",3,null],[11,"saturating_mul_64","","Saturating integer multiplication with a 64-bit number. Computes `self * other`, saturating\nat the numeric bounds instead of overflowing.",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"u128"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or\noverflow occurred.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"mul","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_mul_64","extprim::u128","Checked integer multiplication with a 64-bit number. Computes `self * other`, returning\n`None` if underflow or overflow occurred.",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"option"}}],[11,"mul","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"mul_assign","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"mul_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u64"}],"output":null}],[11,"mul","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"checked_mul","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"option"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`. Wrapped division on unsigned types is\njust normal division. There&#39;s no way wrapping could ever happen. This function exists, so\nthat all operations are accounted for in the wrapping operations.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`. Wrapped remainder calculation on\nunsigned types is just the regular remainder calculation. There&#39;s no way wrapping could\never happen. This function exists, so that all operations are accounted for in the wrapping\noperations.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"u128"}}],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `other`.",3,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `other`.",3,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0`.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0`.",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":{"name":"option"}}],[11,"div","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_assign","extprim::u128","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"rem_assign","","",3,{"inputs":[{"name":"u128"},{"name":"u128"}],"output":null}],[11,"checked_div","","",3,{"inputs":[{"name":"u128"},{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_u128","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"to_i128","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"min_value","","Returns the smallest unsigned 128-bit integer (0).",3,{"inputs":[],"output":{"name":"u128"}}],[11,"max_value","","Returns the largest unsigned 128-bit integer\n(`340_282_366_920_938_463_463_374_607_431_768_211_455`).",3,{"inputs":[],"output":{"name":"u128"}}],[11,"zero","","Returns the constant 0.",3,{"inputs":[],"output":{"name":"u128"}}],[11,"one","","Returns the constant 1.",3,{"inputs":[],"output":{"name":"u128"}}],[11,"min_value","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self` (including leading zeros).",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `shift`, wrapping the truncated bits to\nthe end of the resulting integer.",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `shift`, wrapping the truncated bits to\nthe beginning of the resulting integer.",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"to_le","","Converts self to little endian from the target&#39;s endianness.",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"pow","","Raises `self` to the power of `exp`, using exponentiation by squaring.",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"is_power_of_two","","Returns `true` if and only if `self == 2**k` for some `k`.",3,{"inputs":[{"name":"u128"}],"output":{"name":"bool"}}],[11,"next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. Unspecified behavior on\noverflow.",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"checked_next_power_of_two","","Returns the smallest power of two greater than or equal to `self`. If the next power of two\nis greater than the type&#39;s maximum value, `None` is returned, otherwise the power of two is\nwrapped in `Some`.",3,{"inputs":[{"name":"u128"}],"output":{"name":"option"}}],[11,"count_ones","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"count_zeros","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"leading_zeros","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"u32"}}],[11,"rotate_left","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"from_be","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"to_le","","",3,{"inputs":[{"name":"u128"}],"output":{"name":"self"}}],[11,"pow","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shl","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shr","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shl","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shr","","",3,{"inputs":[{"name":"u128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u128"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"i128","extprim","Signed 128-bit integer.",null,null],[3,"i128","extprim::i128","An signed 128-bit number.",null,null],[5,"div_rem","","Computes the divisor and remainder simultaneously. Returns `(a/b, a%b)`.",null,null],[17,"BITS","","Number of bits a signed 128-bit number occupies.",null,null],[17,"BYTES","","Number of bytes a signed 128-bit number occupies.",null,null],[17,"MIN","","The smallest signed 128-bit integer (`-170_141_183_460_469_231_731_687_303_715_884_105_728`).",null,null],[17,"MAX","","The largest signed 128-bit integer (`170_141_183_460_469_231_731_687_303_715_884_105_727`).",null,null],[17,"ZERO","","The constant 0.",null,null],[17,"ONE","","The constant 1.",null,null],[11,"eq","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"clone","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"i128"}}],[11,"new","","Constructs a new 128-bit integer from a 64-bit integer.",4,{"inputs":[{"name":"i64"}],"output":{"name":"i128"}}],[11,"from_parts","","Constructs a new 128-bit integer from the high-64-bit and low-64-bit parts.",4,{"inputs":[{"name":"i64"},{"name":"u64"}],"output":{"name":"i128"}}],[11,"low64","","Fetch the lower-64-bit of the number.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u64"}}],[11,"high64","","Fetch the higher-64-bit of the number.",4,{"inputs":[{"name":"i128"}],"output":{"name":"i64"}}],[11,"as_u128","","Convert this number to unsigned with wrapping.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u128"}}],[11,"rand","","",4,{"inputs":[{"name":"r"}],"output":{"name":"i128"}}],[11,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\nthe type.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of\nthe type.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_neg","","Wrapping (modular) negation. Computes `-self`, wrapping around at the boundary of the type.",4,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"overflowing_add","","Calculates `self + other`.",4,null],[11,"overflowing_sub","","Calculates `self - other`.",4,null],[11,"overflowing_neg","","Negates `self`, overflowing if this is equal to the minimum value.",4,null],[11,"checked_neg","","Checked negation. Computes `-self`, returning `None` if `self == MIN`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"saturating_add","","Saturating integer addition. Computes `self + other`, saturating at the numeric bounds\ninstead of overflowing.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_sub","","Saturating integer subtraction. Computes `self - other`, saturating at the numeric bounds\ninstead of overflowing.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_neg","","Saturating integer negation. Computes `-self`, saturating at numeric bounds instead of\noverflowing.",4,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"checked_add","","Checked integer addition. Computes `self + other`, returning `None` if overflow occurred.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"add","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"self"}}],[11,"add","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_sub","extprim::i128","Checked integer subtraction. Computes `self - other`, returning `None` if underflow\noccurred.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"sub","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"self"}}],[11,"sub","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"add_assign","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"sub_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"neg","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"neg","extprim::traits","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"self"}}],[11,"checked_add","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"option"}}],[11,"saturating_add","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"saturating_sub","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"cmp","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"ordering"}}],[11,"not","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"bitand","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"not","extprim::traits","",1,{"inputs":[{"name":"wrapping"}],"output":{"name":"self"}}],[11,"bitand","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand_assign","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"bitor_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"bitxor_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"wrapping_shl","","Panic-free bitwise shift-left; yields `self &lt;&lt; (shift % 128)`.",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"wrapping_shr","","Panic-free bitwise shift-right; yields `self &gt;&gt; (shift % 128).",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"overflowing_shl","","Shifts `self` left by `other` bits.",4,null],[11,"overflowing_shr","","Shifts `self` right by `other` bits.",4,null],[11,"checked_shl","","Checked shift left. Computes `self &lt;&lt; other`, returning `None` if rhs is larger than or\nequal to the number of bits in `self` (128).",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"option"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i128"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"u32"}],"output":{"name":"self"}}],[11,"checked_shr","extprim::i128","Checked shift right. Computes `self &gt;&gt; other`, returning `None` if the shift is larger than\nor equal to the number of bits in `self` (128).",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"option"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i128"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl_assign","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"u8"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u16"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u64"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"usize"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i8"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i16"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i32"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i64"}],"output":null}],[11,"shl_assign","","",4,{"inputs":[{"name":"i128"},{"name":"isize"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u8"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u16"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"u64"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"usize"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i8"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i16"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i32"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i64"}],"output":null}],[11,"shr_assign","","",4,{"inputs":[{"name":"i128"},{"name":"isize"}],"output":null}],[11,"overflowing_mul","","Calculates the multiplication of `self` and `other`.",4,null],[11,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\nof the type.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"saturating_mul","","Saturating integer multiplication. Computes `self * other`, saturating at the numeric\nbounds instead of overflowing.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"checked_mul","","Checked integer multiplication. Computes `self * other`, returning `None` if underflow or\noverflow occurred.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"mul","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"self"}}],[11,"mul","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"self"}}],[11,"mul_assign","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"checked_mul","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"option"}}],[11,"wrapping_div","","Wrapping (modular) division. Computes `self / other`, wrapping around at the boundary of\nthe type.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"wrapping_rem","","Wrapping (modular) remainder. Computes `self % other`, wrapping around at the boundary of\nthe type.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"i128"}}],[11,"overflowing_div","","Calculates the divisor when `self` is divided by `other`.",4,null],[11,"overflowing_rem","","Calculates the remainder when `self` is divided by `other`.",4,null],[11,"checked_div","","Checked integer division. Computes `self / other`, returning `None` if `other == 0` or the\noperation results in underflow or overflow.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"checked_rem","","Checked integer remainder. Computes `self % other`, returning `None` if `other == 0` or the\noperation results in underflow or overflow.",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":{"name":"option"}}],[11,"div","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","extprim::traits","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"rem","","",1,{"inputs":[{"name":"wrapping"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_assign","extprim::i128","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"rem_assign","","",4,{"inputs":[{"name":"i128"},{"name":"i128"}],"output":null}],[11,"checked_div","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"to_u64","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"to_f64","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from_u64","","",4,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_i64","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_f64","","",4,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"to_u128","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"to_i128","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",4,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"min_value","","Returns the smallest signed 128-bit integer\n(`-170_141_183_460_469_231_731_687_303_715_884_105_728`).",4,{"inputs":[],"output":{"name":"i128"}}],[11,"max_value","","Returns the largest signed 128-bit integer\n(`170_141_183_460_469_231_731_687_303_715_884_105_727`).",4,{"inputs":[],"output":{"name":"i128"}}],[11,"zero","","Returns the constant 0.",4,{"inputs":[],"output":{"name":"i128"}}],[11,"one","","Returns the constant 1.",4,{"inputs":[],"output":{"name":"i128"}}],[11,"min_value","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"max_value","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"zero","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_zero","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"bool"}}],[11,"one","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"count_ones","","Returns the number of ones in the binary representation of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"rotate_left","","Shifts the bits to the left by a specified amount, `shift`, wrapping the truncated bits to\nthe end of the resulting integer.",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"rotate_right","","Shifts the bits to the right by a specified amount, `shift`, wrapping the truncated bits to\nthe end of the resulting integer.",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"i128"}}],[11,"swap_bytes","","Reverses the byte order of the integer.",4,{"inputs":[{"name":"i128"}],"output":{"name":"i128"}}],[11,"from_be","","Converts an integer from big endian to the target&#39;s endianness.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","Converts an integer from little endian to the target&#39;s endianness.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","Converts `self` to big endian from the target&#39;s endianness.",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"to_le","","Converts self to little endian from the target&#39;s endianness.",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"pow","","Raises `self` to the power of `exp`, using exponentiation by squaring.",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"count_ones","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"count_zeros","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"leading_zeros","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"trailing_zeros","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"u32"}}],[11,"rotate_left","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"rotate_right","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"swap_bytes","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"from_be","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_le","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_be","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"to_le","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"pow","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shl","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"signed_shr","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shl","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"unsigned_shr","","",4,{"inputs":[{"name":"i128"},{"name":"u32"}],"output":{"name":"self"}}],[11,"abs","","Computes the absolute value of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"signum","","Returns a number representing sign of `self`.",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"is_positive","","Returns `true` if `self` is positive and `false` if the number is zero or negative.\n# Examples",4,{"inputs":[{"name":"i128"}],"output":{"name":"bool"}}],[11,"is_negative","","Returns `true` if `self` is negative and `false` if the number is zero or positive.\n# Examples",4,{"inputs":[{"name":"i128"}],"output":{"name":"bool"}}],[11,"abs","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"signum","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"self"}}],[11,"is_positive","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"bool"}}],[11,"is_negative","","",4,{"inputs":[{"name":"i128"}],"output":{"name":"bool"}}],[11,"abs_sub","","",4,{"inputs":[{"name":"i128"},{"name":"self"}],"output":{"name":"self"}}],[11,"from_str_radix","","Converts a string slice in a given base to an integer.",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","",4,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i128"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","extprim::u128","",3,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","extprim::i128","",4,{"inputs":[{"name":"t"}],"output":{"name":"option"}}]],"paths":[[3,"ParseIntError"],[3,"Wrapping"],[8,"ToExtraPrimitive"],[3,"u128"],[3,"i128"]]};
initSearch(searchIndex);
